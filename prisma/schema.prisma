// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  activities    Activity[]
  teams         TeamMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             Int       @id @default(autoincrement())
  name           String
  status         String    @default("active")
  progress       Float     @default(0)
  role          String    @default("member")
  due_date       DateTime?
  phase          String    @default("planning")
  budget_planned Float     @default(0)
  budget_actual  Float     @default(0)
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  songs          Song[]
  tasks          Task[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model Song {
  id        Int      @id @default(autoincrement())
  name      String
  status    String   @default("pending")
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  status    String   @default("todo")
  projectId Int
  songId    Int?
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  song      Song?    @relation(fields: [songId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Activity {
  id          Int      @id @default(autoincrement())
  type        String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  members     TeamMember[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    String
  role      String   @default("member")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([teamId, userId])
} 